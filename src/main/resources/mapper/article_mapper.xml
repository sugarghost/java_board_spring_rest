<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.board.spring.rest.yoony.article.ArticleMapper">
  <!--
  article 추가를 위한 insert query
  추가 후 생성된 article_id를 Parameter DTO에 articleId에 저장해 반환
  -->
  <insert id="insertArticle" parameterType="com.board.spring.rest.yoony.article.ArticleDTO"
    useGeneratedKeys="true"
    keyProperty="articleId" keyColumn="article_id">
    INSERT INTO article
      (category_id, writer, password, title, content)
    VALUES (#{categoryId}, #{writer}, #{password}, #{title}, #{content})
  </insert>
  <!--
  article Count 검색을 위한 select query
  검색 조건에 따라 where절에 조건을 추가
  검색 조건은 searchWord(title, writer, content), categoryId, startDate, endDate
    -->
  <select id="selectArticleCount" resultType="int"
    parameterType="com.board.spring.rest.yoony.article.search.SearchDTO">
    SELECT COUNT(article_id) FROM article
    <where>
      <if
        test="!@com.board.spring.rest.yoony.util.ValidationChecker@isEmpty(searchWord)">
        (
        title LIKE CONCAT('%',#{searchWord},'%')
        OR content LIKE CONCAT('%',#{searchWord},'%')
        OR writer LIKE CONCAT('%',#{searchWord},'%')
        )
      </if>
      <if
        test="categoryId > 0 and categoryId != null">
        AND category_id = #{categoryId}
      </if>
      <if test="!@com.board.spring.rest.yoony.util.ValidationChecker@isEmpty(startDate) and
                !@com.board.spring.rest.yoony.util.ValidationChecker@isEmpty(endDate)">
        AND created_date BETWEEN DATE(#{startDate}) AND DATE(#{endDate})+1
      </if>
    </where>
    ORDER BY article_id DESC
  </select>
  <!--
article 검색을 위한 select query
검색 조건에 따라 where절에 조건을 추가
검색 조건은 searchWord(title, writer, content), categoryId, startDate, endDate
페이징 처리를 위해 articlePerPage, pageNum을 사용
  -->

  <select id="selectArticleList" resultType="com.board.spring.rest.yoony.article.ArticleDTO"
    parameterType="com.board.spring.rest.yoony.article.search.SearchDTO">
    SELECT
    article_id, category_id,
    (
    SELECT name
    FROM category
    WHERE category_id = article.category_id LIMIT 1
    ) AS category_name,
    writer, title,
    content, view_count, created_date, modified_date,
    (SELECT EXISTS(SELECT 1 FROM article_file WHERE article_id = article.article_id)) AS
    is_file_exist
    FROM article
    <where>
      <if
        test="!@com.board.spring.rest.yoony.util.ValidationChecker@isEmpty(searchWord)">
        (
        title like CONCAT('%',#{searchWord},'%')
        OR content like CONCAT('%',#{searchWord},'%')
        OR writer like CONCAT('%',#{searchWord},'%')
        )
      </if>
      <if
        test="categoryId > 0 and categoryId != null">
        AND category_id = #{categoryId}
      </if>
      <if test="!@com.board.spring.rest.yoony.util.ValidationChecker@isEmpty(startDate) and
      !@com.board.spring.rest.yoony.util.ValidationChecker@isEmpty(endDate)">
        AND created_date BETWEEN DATE(#{startDate}) AND DATE(#{endDate})+1
      </if>
    </where>
    ORDER BY article_id DESC
    LIMIT #{articlePerPage} OFFSET ${(pageNum - 1 )* articlePerPage}
  </select>

  <!--
  특정 Article 정보를 가져오기 위한 query
  Category table subQuery를 이용해 category_name을 가져옴
  File table subQuery를 이용해 파일 존재 여부를 가져옴
  -->
  <select id="selectArticle" resultType="com.board.spring.rest.yoony.article.ArticleDTO"
    parameterType="long">
    SELECT article_id,
           category_id,
           (SELECT name
            FROM category
            WHERE category_id = article.category_id LIMIT 1) AS category_name,
           writer,
           password,
           title,
           content,
           view_count,
           created_date,
           modified_date,
           (SELECT EXISTS(SELECT 1
                          FROM article_file
                          WHERE article_id = article.article_id)) AS is_file_exist
    FROM article
    WHERE article_id = #{articleId}
  </select>
  <!--
  특정 Article의 존재 여부를 확인하기 위한 query
  -->
  <select id="isArticleExist" resultType="boolean" parameterType="long">
    SELECT EXISTS(
             SELECT 1
             FROM article
             WHERE article_id = #{articleId}
             LIMIT 1
             ) AS success

  </select>

  <!--
  특정 Article과 입력된 비밀번호가 일치하는지 확인하기 위한 query
  비밀번호는 암호화 되어 비교되어야함
  -->
  <select id="isPasswordCorrect" resultType="boolean"
    parameterType="com.board.spring.rest.yoony.article.ArticleDTO">
    SELECT EXISTS(
             SELECT 1
             FROM article
             WHERE article_id = #{articleId}
               AND password = #{password} LIMIT 1
             ) AS success

  </select>
  <!--
  특정 Article의 정보를 수정하기 위한 query
  수정시 수정시간에 현재 시간이 자동으로 입력되도록 설정됨
  -->
  <update id="updateArticle" parameterType="com.board.spring.rest.yoony.article.ArticleDTO">
    UPDATE article
    SET writer        = #{writer},
        title         = #{title},
        content       = #{content},
        modified_date = current_timestamp()
    WHERE article_id = #{articleId}
      AND password = #{password}
  </update>
  <!--
  특정 Article의 조회수를 1 증가시키기 위한 query
  -->
  <update id="updateArticleHit" parameterType="long">
    UPDATE article
    SET view_count = view_count + 1
    WHERE article_id = #{articleId}
  </update>
  <!--
  특정 Article을 삭제하기 위한 query
  -->
  <delete id="deleteArticle" parameterType="com.board.spring.rest.yoony.article.ArticleDTO">
    DELETE
    FROM article
    WHERE article_id = #{articleId}
      AND password = #{password}
  </delete>
</mapper>